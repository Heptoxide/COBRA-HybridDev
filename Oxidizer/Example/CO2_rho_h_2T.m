function [T] = CO2_rho_h_2T(rho, h, T_guess)

% Purpose:
%??????????????????????????????????????????????????????????????????????????
% This function places a nonlinear solver around the CO2Props function in
% order to change the independant variable from T & rho to rho & h.
%==========================================================================
% Inputs:
%??????????????????????????????????????????????????????????????????????????
% rho ? Density, kg/m3
% h ? Enthalpy, kJ/kg
%==========================================================================
% Outputs:
%??????????????????????????????????????????????????????????????????????????
% T ? Temperature, K
%==========================================================================

rho_Known = rho; % Save rho to a more intuitive name
h_Known = h; % Save h to a more intuitive name
%T guess = 300; % Guess value for T for lsqnonlin to use

% Create a function for lsqnonlin to solve T(rho,h)
pFunc = @(T_Unknown) getfield(CO2Props(T_Unknown,rho_Known),'h')-h_Known;
%pFunc = @(T Unknown) getfield(CO2PropsNIST(T Unknown,rho Known),'h')?h Known;
% Sinse T Unknown is not pre defined in pFunc, lsqnonlin will find a T for
% rho Known and h Known

T = lsqnonlin(pFunc,T_guess,0,inf,optimset('Display','off'));

end